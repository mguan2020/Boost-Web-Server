cmake_minimum_required(VERSION 3.10.0)
project(yet-another-web-server)

# Make sure developers do not run cmake in the main project directory, to keep
# build artifacts from becoming clutter
if (${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
    message(FATAL_ERROR "In-source builds not allowed.
    Please make a new directory (called a build directory) and run CMake from there.
    You may need to remove CMakeCache.txt." )
endif()

# Turn on debug builds if we are building in a devel shell
if (CMAKE_BUILD_TYPE STREQUAL "" AND "$ENV{DEVEL_SHELL}" STREQUAL "1")
    message(STATUS "Setting debug build type by default in devel shell")
    set(CMAKE_BUILD_TYPE Debug)
endif()

# Output binaries to a sub directory "bin"
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Enable cmake testing
include(CTest)
enable_testing()

# Enable GoogleTest
include(GoogleTest)
add_subdirectory(/usr/src/googletest googletest)

# Enable test coverage
include(cmake/CodeCoverageReportConfig.cmake)

# Enable Boost
# Use static libraries so binaries can be deployed without a full boost install
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.50 REQUIRED COMPONENTS system log_setup log)
message(STATUS "Boost version: ${Boost_VERSION}")

include_directories(include)

# source lib
add_library(session_lib src/session.cc)
add_library(server_lib src/server.cc)
add_library(server_factory_lib src/server_factory.cc)
add_library(config_lib src/config_parser.cc)
add_library(http_request_parser_lib src/http_request_parser.cc)
add_library(http_response_lib src/http_response.cc)
add_library(get_response_lib src/get_response.cc)
add_library(tcp_socket_lib src/tcp_socket.cc)
add_library(session_factory_lib src/session_factory.cc)
add_library(logger_lib src/logger.cc)
add_library(file_handler_lib src/file_handler.cc)
add_library(echo_handler_lib src/echo_handler.cc)
add_library(request_handler_lib src/request_handler.cc)
add_library(mime_lib src/mime.cc)

target_link_libraries(get_response_lib http_response_lib)
target_link_libraries(session_lib http_request_parser_lib get_response_lib logger_lib request_handler_lib)
target_link_libraries(session_factory_lib session_lib request_handler_lib)
target_link_libraries(server_lib session_lib session_factory_lib config_lib tcp_socket_lib)
target_link_libraries(logger_lib Boost::log_setup Boost::log http_request_parser_lib)
target_link_libraries(file_handler_lib logger_lib config_lib mime_lib http_request_parser_lib get_response_lib Boost::filesystem)
target_link_libraries(server_factory_lib server_lib http_request_parser_lib request_handler_lib echo_handler_lib file_handler_lib Boost::filesystem)

# source executables
add_executable(server src/server_main.cc)
target_link_libraries(server logger_lib server_lib server_factory_lib config_lib pthread Boost::system)

# test executables
add_executable(server_test tests/server_test.cc)
add_executable(config_parser_test tests/config_parser_test.cc)
add_executable(http_request_parser_test tests/http_request_parser_test.cc)
add_executable(session_test tests/session_test.cc)
add_executable(get_response_test tests/get_response_test.cc)
add_executable(tcp_socket_test tests/tcp_socket_test.cc)
add_executable(file_handler_test tests/file_handler_test.cc)

target_link_libraries(server_test server_lib session_factory_lib  gtest_main)
target_link_libraries(config_parser_test config_lib gtest_main)
target_link_libraries(http_request_parser_test http_request_parser_lib gtest_main)
target_link_libraries(session_test session_lib echo_handler_lib get_response_lib gtest_main)
target_link_libraries(get_response_test get_response_lib gtest_main)
target_link_libraries(tcp_socket_test tcp_socket_lib gtest_main)
target_link_libraries(file_handler_test http_request_parser_lib file_handler_lib gtest_main)

# test binary
gtest_discover_tests(server_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests)
gtest_discover_tests(config_parser_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests) 
gtest_discover_tests(http_request_parser_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests) 
gtest_discover_tests(session_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests) 
gtest_discover_tests(get_response_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests)
gtest_discover_tests(tcp_socket_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests)
gtest_discover_tests(file_handler_test WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tests)
# integration test
add_test(NAME integration_test COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/tests/integration_test/integration_test.sh)

# test coverage
generate_coverage_report(TARGETS server session_lib session_factory_lib server_lib config_lib http_request_parser_lib
                         http_response_lib get_response_lib tcp_socket_lib logger_lib file_handler_lib echo_handler_lib
                         request_handler_lib server_factory_lib mime_lib
                         TESTS server_test config_parser_test http_request_parser_test session_test get_response_test
                         tcp_socket_test file_handler_test)
